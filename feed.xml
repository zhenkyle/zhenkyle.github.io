<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>zhenke blog</title>
    <description>This my awesome blog.</description>
    <link>http://zhenkeblog.cn/</link>
    <atom:link href="http://zhenkeblog.cn/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>实现 Hibernate composite id 的几种方式</title>
        <description>&lt;p&gt;网上很多的资料都是过时的或不全面。最新、最全的资料应该来自Hibernate官方文档 5.1.2.1. Composite identifier节。&lt;/p&gt;

&lt;h3 id=&quot;composite-id&quot;&gt;对于新项目尽量不要使用composite id&lt;/h3&gt;

&lt;p&gt;composite id 仅仅是用于对付legacy 数据库的。对于新项目，应该让每个实体都有一个id字段，该字段可以是不代表业务含义的逻辑id。&lt;/p&gt;

&lt;h3 id=&quot;composite-id-3&quot;&gt;实现composite id 有3种大方式&lt;/h3&gt;

&lt;h4 id=&quot;embeddedid&quot;&gt;@EmbeddedId方式&lt;/h4&gt;

&lt;p&gt;又分两种方式&lt;/p&gt;

&lt;h5 id=&quot;jpa-&quot;&gt;JPA 方式&lt;/h5&gt;

&lt;p&gt;在@Entity中定义@ManyToOne @OneToOne等关系，@Embeddable 中只能是id字段，不能是@Entity&lt;/p&gt;

&lt;h5 id=&quot;jpa&quot;&gt;不兼容JPA方式&lt;/h5&gt;

&lt;p&gt;在@Embeddable 中定义@ManyToOne @OneToOne等关系，@Embeddable 中可以是@Entity&lt;/p&gt;

&lt;h4 id=&quot;id&quot;&gt;多@id方式&lt;/h4&gt;

&lt;p&gt;仅Hibernate支持，很多使用&lt;code&gt;hbm.xml&lt;/code&gt;的老代码都是这种方式&lt;/p&gt;

&lt;h4 id=&quot;idclass-&quot;&gt;@IdClass 方式&lt;/h4&gt;

&lt;p&gt;不推荐使用&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;参考&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.jboss.org/hibernate/orm/4.3/manual/en-US/html/ch05.html#mapping-declaration-id&quot;&gt;Hibernate 官方文档 5.1.2.1. Composite identifier&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 07 Oct 2014 11:27:00 +0800</pubDate>
        <link>http://zhenkeblog.cn/2014/10/07/hibernate-composite-id-methods/</link>
        <guid isPermaLink="true">http://zhenkeblog.cn/2014/10/07/hibernate-composite-id-methods/</guid>
      </item>
    
      <item>
        <title>DAO 层设计方案: 如何减少普通CURD操作的重复</title>
        <description>&lt;p&gt;在普通DAO层设计方案中,存在大量的普通CURD操作重复代码.解决方案如下&lt;/p&gt;

&lt;h3 id=&quot;hibernate-dao&quot;&gt;使用泛型Hibernate DAO&lt;/h3&gt;

&lt;h3 id=&quot;hibernatesessionfactory&quot;&gt;一种直接基于hibernate.SessionFactory的实现&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://1194867672-qq-com.iteye.com/blog/1159918&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;spring-hibernate-support-&quot;&gt;一种基于Spring Hibernate Support 的普通的实现&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/superzzz/article/details/6720348&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;aop&quot;&gt;一种使用AOP的实现&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/cn/java/j-genericdao.html&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;spring-data-jpa&quot;&gt;使用Spring data JPA&lt;/h3&gt;

&lt;p&gt;这是最好的方式&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/springside/springside4&quot;&gt;参考Springside&lt;/a&gt; 或 Spring data JPA文档&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Sep 2014 20:44:00 +0800</pubDate>
        <link>http://zhenkeblog.cn/2014/09/29/dao-design/</link>
        <guid isPermaLink="true">http://zhenkeblog.cn/2014/09/29/dao-design/</guid>
      </item>
    
      <item>
        <title>Hibernate ddl2auto create 方式的应用</title>
        <description>&lt;p&gt;设置&lt;code&gt;hibernate.hbm2ddl.auto&lt;/code&gt;等于&lt;code&gt;create&lt;/code&gt;之后,haibernate会:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;每次启动时drop 掉所有的数据库表，并重新建表&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果classpath的根下有&lt;code&gt;import.sql&lt;/code&gt;，就执行它 (import.sql要用本地编码方式，如在windows下gbk,在mac/linux下utf8)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此,&lt;code&gt;hibernate.hbm2ddl.auto&lt;/code&gt;等于&lt;code&gt;create&lt;/code&gt;，在开发阶段导入测试初始数据时非常有用，但千万不能在生产环境中用，在生产环境中用会导致数据丢失。&lt;/p&gt;

&lt;p&gt;与&lt;code&gt;create&lt;/code&gt;方式类似的是&lt;code&gt;hibernate.hbm2ddl.auto&lt;/code&gt;的&lt;code&gt;create-drop&lt;/code&gt;方式会在hibernate程序每次退出时，drop所有表。&lt;/p&gt;

&lt;p&gt;在生产环境中应使用&lt;code&gt;none&lt;/code&gt;或&lt;code&gt;auto&lt;/code&gt;方式。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/673802/how-to-import-initial-data-to-database-with-hibernate&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Sep 2014 11:46:00 +0800</pubDate>
        <link>http://zhenkeblog.cn/hibernate/2014/09/29/hibernate-ddl2auto-create/</link>
        <guid isPermaLink="true">http://zhenkeblog.cn/hibernate/2014/09/29/hibernate-ddl2auto-create/</guid>
      </item>
    
      <item>
        <title>Hibernate POJO id 的设计策略</title>
        <description>&lt;p&gt;当在Hibernate 中设计POJO 时,每一个POJO都应有一个id.&lt;/p&gt;

&lt;p&gt;如果在前台界面(strtus)中不准备让用户自行维护该id,应将该id设计为自增型.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;generator class=&quot;identity&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果在前台界面(struts)中准备让用户自行维护该id，可将该id设计为普通非自增型数据类型,然后再strtus中提供用户界面让用户维护.&lt;/p&gt;

&lt;p&gt;更复杂的组合id,应建立一个自增性id作为无业务意义的物理id,再在业务逻辑层面保证组合id的唯一性.&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Sep 2014 11:25:00 +0800</pubDate>
        <link>http://zhenkeblog.cn/struts/hibernate/2014/09/29/hibernate-pojo-id/</link>
        <guid isPermaLink="true">http://zhenkeblog.cn/struts/hibernate/2014/09/29/hibernate-pojo-id/</guid>
      </item>
    
      <item>
        <title>Eclipse 报警: must override a supperclass method</title>
        <description>&lt;p&gt;实现接口时,报这个错.&lt;/p&gt;

&lt;p&gt;解决方法&lt;/p&gt;

&lt;p&gt;项目上点右键 进 &lt;code&gt;Properties - Java Build Path - Libraries&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;将&lt;code&gt;JRE System Library [JavaSE - 1.5]&lt;/code&gt; 改为 &lt;code&gt;JRE System Library [JavaSE - 1.7]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;再检查 &lt;code&gt;Properites - Java Compiler&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;应打钩 &lt;code&gt;Use compliance from execution environment &#39;JavaSE-1.7&#39; on the &#39;Java Build Path&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;参考&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/11298358/method-must-override-a-superclass-method-latest-sdk&quot;&gt;参考1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mmqzlj.blog.51cto.com/2092359/803060&quot;&gt;参考2&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Sep 2014 09:25:00 +0800</pubDate>
        <link>http://zhenkeblog.cn/2014/09/27/must-override-a-supperclass-method/</link>
        <guid isPermaLink="true">http://zhenkeblog.cn/2014/09/27/must-override-a-supperclass-method/</guid>
      </item>
    
      <item>
        <title>批量装换gb2313文件到utf8</title>
        <description>&lt;h3 id=&quot;linux&quot;&gt;在Linux下&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;files=`find . -name &#39;*.java&#39; | xargs enca -L zh | grep GB2312 | cut -d: -f1`
for f in $files; do
  iconv -f GBK -t UTF-8 $f &amp;gt; $f.utf &amp;amp;&amp;amp; mv -f $f.utf $f &amp;amp;&amp;amp; echo &quot;$f done&quot;
done
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section&quot;&gt;参考&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/bamanzi/archive/2010/06/11/2547025.html&quot;&gt;参考1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://demi-panda.com/2013/01/12/linux-encoding-convert/&quot;&gt;参考2&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Sep 2014 09:25:00 +0800</pubDate>
        <link>http://zhenkeblog.cn/2014/09/27/batch-convert-gb2312-file-to-uft8/</link>
        <guid isPermaLink="true">http://zhenkeblog.cn/2014/09/27/batch-convert-gb2312-file-to-uft8/</guid>
      </item>
    
      <item>
        <title>Struts 传递 model 到 view</title>
        <description>&lt;h3 id=&quot;struts--action--view--model--model&quot;&gt;Struts 在 action 和 view 传递 model 的传统方式： 传model的每一个属性&lt;/h3&gt;

&lt;p&gt;把model中的每一个属性传递到view, 以下是一个例子&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;struts.xml&lt;/code&gt;中&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;		&amp;lt;action name=&quot;forwardToAddShop&quot; class=&quot;com.company.mis.system.action.shop.ShopManagerAction&quot;
			method=&quot;forwardToAddShop&quot;&amp;gt;
			&amp;lt;result name=&quot;success&quot;&amp;gt;/pages/shop/addShop.jsp&amp;lt;/result&amp;gt;
		&amp;lt;/action&amp;gt;
		&amp;lt;action name=&quot;addShop&quot; class=&quot;com.company.mis.system.action.shop.ShopManagerAction&quot; method=&quot;addShop&quot;&amp;gt;
			&amp;lt;result name=&quot;success&quot; type=&quot;chain&quot;&amp;gt;
				&amp;lt;param name=&quot;actionName&quot;&amp;gt;confirm&amp;lt;/param&amp;gt;
				&amp;lt;param name=&quot;namespace&quot;&amp;gt;/&amp;lt;/param&amp;gt;
			&amp;lt;/result&amp;gt;
		&amp;lt;/action&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ShopmanagerAction.java&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ShopManagerAction extends ActionSupport {
	// 注入接口属性
	private ShopService shopService;
	// 门店名称
	private String shopName;
	// 地址
	private String address;
	// 邮编
	private String zipCode;
	// 电话
	private String telNumber;
	
		public void setShopService(ShopService shopService) {
		this.shopService = shopService;
	}

	public void setShopName(String shopName) {
		this.shopName = shopName;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public void setZipCode(String zipCode) {
		this.zipCode = zipCode;
	}

	public void setTelNumber(String telNumber) {
		this.telNumber = telNumber;
	}

	/**
	 * 跳转到添加门店界面
	 * 
	 * @return
	 * @throws Exception
	 */
	public String forwardToAddShop() throws Exception {
		return SUCCESS;
	}

	/**
	 * 添加门店
	 * 
	 * @return
	 * @throws Exception
	 */
	public String addShop() throws Exception {
    
    	Shop shop = new Shop();
		shop.setShopName(shopName);
		shop.setAddress(address);
		shop.setZipCode(zipCode);
		shop.setTelNumber(telNumber);
	
		boolean result = shopService.addShop(shop);
		Confirm confirm = new Confirm();
		if (result) {
			confirm.setIsSuccess(&quot;right&quot;);
			confirm.setMessage(&quot;门店添加成功&quot;);
			confirm.setUrl(&quot;shopList.action&quot;);
			confirm.setRetName(&quot;门店列表&quot;);
		} else {
			confirm.setIsSuccess(&quot;error&quot;);
			confirm.setMessage(&quot;门店添加失败&quot;);
			confirm.setUrl(&quot;shopList.action&quot;);
			confirm.setRetName(&quot;门店列表&quot;);
		}
		ActionContext.getContext().put(&quot;confirm&quot;, confirm);
		return SUCCESS;
	}
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;/pages/shop/addShop.jsp&lt;/code&gt;中&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;		&amp;lt;form id=&quot;myForm&quot; action=&quot;addShop.action&quot; method=&quot;post&quot;&amp;gt;
					&amp;lt;table&amp;gt;
						&amp;lt;tr&amp;gt;
							&amp;lt;td&amp;gt;
								门店名称：
							&amp;lt;/td&amp;gt;
							&amp;lt;td&amp;gt;
								&amp;lt;input type=&quot;text&quot; name=&quot;shopName&quot; /&amp;gt;
							&amp;lt;/td&amp;gt;
						&amp;lt;/tr&amp;gt;
						&amp;lt;tr&amp;gt;
							&amp;lt;td &amp;gt;
								地址：
							&amp;lt;/td&amp;gt;
							&amp;lt;td &amp;gt;
								&amp;lt;input type=&quot;text&quot; name=&quot;address&quot; /&amp;gt;
							&amp;lt;/td&amp;gt;
						&amp;lt;/tr&amp;gt;
						&amp;lt;tr&amp;gt;
							&amp;lt;td &amp;gt;
								邮编：
							&amp;lt;/td&amp;gt;
							&amp;lt;td &amp;gt;
								&amp;lt;input type=&quot;text&quot; name=&quot;zipCode&quot; /&amp;gt;
							&amp;lt;/td&amp;gt;
						&amp;lt;/tr&amp;gt;
						&amp;lt;tr&amp;gt;
							&amp;lt;td&amp;gt;
								电话：
							&amp;lt;/td&amp;gt;
							&amp;lt;td&amp;gt;
								&amp;lt;input type=&quot;text&quot; name=&quot;telNumber&quot; /&amp;gt;
							&amp;lt;/td&amp;gt;
						&amp;lt;/tr&amp;gt;
						&amp;lt;tr&amp;gt;
							&amp;lt;td colspan=&quot;2&quot; &amp;gt;
								&amp;lt;input type=&quot;submit&quot; name=&quot;保存&quot; /&amp;gt;
								&amp;lt;input type=&quot;reset&quot; name=&quot;重置&quot; /&amp;gt;
							&amp;lt;/td&amp;gt;
						&amp;lt;/tr&amp;gt;
					&amp;lt;/table&amp;gt;			
		&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;struts--action--view--model&quot;&gt;改进为 Struts 在 action 和 view 直接传递 model&lt;/h3&gt;

&lt;p&gt;在&lt;code&gt;struts.xml&lt;/code&gt;中&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;		&amp;lt;action name=&quot;forwardToAddShop&quot; class=&quot;com.company.mis.system.action.shop.ShopManagerAction&quot;
			method=&quot;forwardToAddShop&quot;&amp;gt;
			&amp;lt;result name=&quot;success&quot;&amp;gt;/pages/shop/addShop.jsp&amp;lt;/result&amp;gt;
		&amp;lt;/action&amp;gt;
		&amp;lt;action name=&quot;addShop&quot; class=&quot;com.company.mis.system.action.shop.ShopManagerAction&quot; method=&quot;addShop&quot;&amp;gt;
			&amp;lt;result name=&quot;success&quot; type=&quot;chain&quot;&amp;gt;
				&amp;lt;param name=&quot;actionName&quot;&amp;gt;confirm&amp;lt;/param&amp;gt;
				&amp;lt;param name=&quot;namespace&quot;&amp;gt;/&amp;lt;/param&amp;gt;
			&amp;lt;/result&amp;gt;
		&amp;lt;/action&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ShopmanagerAction.java&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class ShopManagerAction extends ActionSupport {
	// 注入接口属性
	private ShopService shopService;

	// Model PO对象
	private Shop shop;

	public void setShopService(ShopService shopService) {
		this.shopService = shopService;
	}

	// 往view传递时用
	public Shop getShop() {
		return shop;
	}

	// 从view获取时用
	public void setShop(Shop shop) {
		this.shop = shop;
	}


	/**
	 * 跳转到添加门店界面
	 * 
	 * @return
	 * @throws Exception
	 */
	public String forwardToAddShop() throws Exception {
		return SUCCESS;
	}

	/**
	 * 添加门店
	 * 
	 * @return
	 * @throws Exception
	 */
	public String addShop() throws Exception {
    
    	// 这里已经自动从view获得shop值了,简化了不少

		boolean result = shopService.addShop(shop);
		Confirm confirm = new Confirm();
		if (result) {
			confirm.setIsSuccess(&quot;right&quot;);
			confirm.setMessage(&quot;门店添加成功&quot;);
			confirm.setUrl(&quot;shopList.action&quot;);
			confirm.setRetName(&quot;门店列表&quot;);
		} else {
			confirm.setIsSuccess(&quot;error&quot;);
			confirm.setMessage(&quot;门店添加失败&quot;);
			confirm.setUrl(&quot;shopList.action&quot;);
			confirm.setRetName(&quot;门店列表&quot;);
		}
		ActionContext.getContext().put(&quot;confirm&quot;, confirm);
		return SUCCESS;
	}
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;/pages/shop/addShop.jsp&lt;/code&gt;中&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;		&amp;lt;form id=&quot;myForm&quot; action=&quot;addShop.action&quot; method=&quot;post&quot;&amp;gt;
					&amp;lt;table&amp;gt;
						&amp;lt;tr&amp;gt;
							&amp;lt;td&amp;gt;
								门店名称：
							&amp;lt;/td&amp;gt;
							&amp;lt;td&amp;gt;
								&amp;lt;input type=&quot;text&quot; name=&quot;shop.shopName&quot; /&amp;gt;
							&amp;lt;/td&amp;gt;
						&amp;lt;/tr&amp;gt;
						&amp;lt;tr&amp;gt;
							&amp;lt;td &amp;gt;
								地址：
							&amp;lt;/td&amp;gt;
							&amp;lt;td &amp;gt;
								&amp;lt;input type=&quot;text&quot; name=&quot;shop.address&quot; /&amp;gt;
							&amp;lt;/td&amp;gt;
						&amp;lt;/tr&amp;gt;
						&amp;lt;tr&amp;gt;
							&amp;lt;td &amp;gt;
								邮编：
							&amp;lt;/td&amp;gt;
							&amp;lt;td &amp;gt;
								&amp;lt;input type=&quot;text&quot; name=&quot;shop.zipCode&quot; /&amp;gt;
							&amp;lt;/td&amp;gt;
						&amp;lt;/tr&amp;gt;
						&amp;lt;tr&amp;gt;
							&amp;lt;td&amp;gt;
								电话：
							&amp;lt;/td&amp;gt;
							&amp;lt;td&amp;gt;
								&amp;lt;input type=&quot;text&quot; name=&quot;shop.telNumber&quot; /&amp;gt;
							&amp;lt;/td&amp;gt;
						&amp;lt;/tr&amp;gt;
						&amp;lt;tr&amp;gt;
							&amp;lt;td colspan=&quot;2&quot; &amp;gt;
								&amp;lt;input type=&quot;submit&quot; name=&quot;保存&quot; /&amp;gt;
								&amp;lt;input type=&quot;reset&quot; name=&quot;重置&quot; /&amp;gt;
							&amp;lt;/td&amp;gt;
						&amp;lt;/tr&amp;gt;
					&amp;lt;/table&amp;gt;			
		&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Fri, 26 Sep 2014 15:41:00 +0800</pubDate>
        <link>http://zhenkeblog.cn/2014/09/26/struts-action-pass-model-to-view/</link>
        <guid isPermaLink="true">http://zhenkeblog.cn/2014/09/26/struts-action-pass-model-to-view/</guid>
      </item>
    
      <item>
        <title>Struts Hibernate Spring 巧妙注入</title>
        <description>&lt;h3 id=&quot;struts-action--service&quot;&gt;Struts Action 注入 Service的传统方式&lt;/h3&gt;

&lt;p&gt;在&lt;code&gt;struts.xml&lt;/code&gt;中&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;		&amp;lt;!-- 门店列表Action --&amp;gt;
		&amp;lt;action name=&quot;shopList&quot; class=&quot;ShopManagerAction&quot; method=&quot;shopList&quot;&amp;gt;
			&amp;lt;result name=&quot;success&quot;&amp;gt;/pages/shop/shopList.jsp&amp;lt;/result&amp;gt;
		&amp;lt;/action&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 spring 的 &lt;code&gt;applicationContext.xml&lt;/code&gt;中&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	&amp;lt;!-- 门店Action注入 --&amp;gt;
	&amp;lt;bean id=&quot;shopManagerAction&quot;
		class=&quot;com.company.mis.system.action.order.ShopManagerAction&quot; scope=&quot;prototype&quot;&amp;gt;
		&amp;lt;property name=&quot;shopService&quot; ref=&quot;shopService&quot; /&amp;gt;
	&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;struts-action--service-1&quot;&gt;Struts Action 注入 Service的自动方式&lt;/h3&gt;

&lt;p&gt;在&lt;code&gt;struts.xml&lt;/code&gt;中 写全限定的类名&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;		&amp;lt;!-- 门店列表Action --&amp;gt;
		&amp;lt;action name=&quot;shopList&quot; class=&quot;com.company.mis.system.action.shop.ShopManagerAction&quot; method=&quot;shopList&quot;&amp;gt;
			&amp;lt;result name=&quot;success&quot;&amp;gt;/pages/shop/shopList.jsp&amp;lt;/result&amp;gt;
		&amp;lt;/action&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 spring 的 &lt;code&gt;applicationContext.xml&lt;/code&gt;中&lt;/p&gt;

&lt;p&gt;不需要再定义&lt;code&gt;shoManagerAction&lt;/code&gt;了,会自动注入&lt;code&gt;shopService&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;service--dao-&quot;&gt;Service 注入 DAO 的传统方式&lt;/h3&gt;

&lt;p&gt;在spring 的 &lt;code&gt;applicationContext.xml&lt;/code&gt;中&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	&amp;lt;!-- 门店Service --&amp;gt;
	&amp;lt;bean id=&quot;shopService&quot;
		class=&quot;com.company.mis.system.service.impl.ShopServiceImpl&quot;&amp;gt;
		&amp;lt;property name=&quot;shopDao&quot; ref=&quot;shopDao&quot; /&amp;gt;
	&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;service--dao--1&quot;&gt;Service 注入 DAO 的自动方式&lt;/h3&gt;

&lt;p&gt;在spring 的 &lt;code&gt;applicationContext.xml&lt;/code&gt;中，首先定义&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	&amp;lt;!-- 定义业务逻辑组件模板 --&amp;gt;
	&amp;lt;!-- 为之注入DAO组件 --&amp;gt;
	&amp;lt;bean id=&quot;myTemplate&quot; abstract=&quot;true&quot; lazy-init=&quot;true&quot;
		p:shopDao-ref=&quot;shopDao&quot;
		p:purviewDao-ref=&quot;orderDao&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后再定义&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	&amp;lt;!-- 定义我的逻辑组件，继承业务逻辑组件的模板 --&amp;gt;
	&amp;lt;bean id=&quot;shopService&quot;
		class=&quot;com.company.mis.system.service.impl.ShopServiceImpl&quot; 
		parent=&quot;myTemplate&quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;就不用定义具体的注入了&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Sep 2014 14:11:00 +0800</pubDate>
        <link>http://zhenkeblog.cn/2014/09/26/struts-hibernate-spring-injection-trick/</link>
        <guid isPermaLink="true">http://zhenkeblog.cn/2014/09/26/struts-hibernate-spring-injection-trick/</guid>
      </item>
    
      <item>
        <title>Mysql 在Windows 下中文显示问号问题</title>
        <description>&lt;p&gt;Mysql 5.6, 通过Chacolatey安装,在Windows下mysql 命令和Mysql Workbench中文显示乱码&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;问题原因&lt;/h3&gt;
&lt;p&gt;Mysql 在window下安装后，确实字符集是latin1，这样处理utf8和gbk都有问题，需要改。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;解决办法&lt;/h3&gt;

&lt;p&gt;在&lt;code&gt;C:\tools\mysql\current\my.ini&lt;/code&gt;文件，加入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[mysqld]
character_set_server=utf8

[client]
default-character-set=utf8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后重启mysqld&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;net stop mysqld
net start mysqld
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-2&quot;&gt;测试&lt;/h3&gt;

&lt;p&gt;分别进入mysql 和 mysql workbench&lt;/p&gt;

&lt;p&gt;看所有字符集&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;show character set;
或
show char set;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看当前&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;status 或 /s (mysql下)
或
show variables like &#39;%char%&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看库
&lt;code&gt;
show create database dbname;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;看表
&lt;code&gt;
show create table tblname /G;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/dreamthen/article/details/38297003&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Sep 2014 09:18:00 +0800</pubDate>
        <link>http://zhenkeblog.cn/2014/09/25/windows-mysql-encoding-problem/</link>
        <guid isPermaLink="true">http://zhenkeblog.cn/2014/09/25/windows-mysql-encoding-problem/</guid>
      </item>
    
      <item>
        <title>Chocolatey: a windows package manager</title>
        <description>&lt;p&gt;Package manager is very popular in Linux/Opensource community. And there are package managers like &lt;code&gt;Home brew&lt;/code&gt; or 
&lt;code&gt;macport&lt;/code&gt; under OSX. It is not very common in windows to have a command line package manager, you are in pain if&lt;br /&gt;
you want to install a lot of software. Chocolatey comes to rescue.&lt;/p&gt;

&lt;p&gt;The installation is easy, it has a thousands of packages, you can install by command.&lt;/p&gt;

&lt;p&gt;Check &lt;a href=&quot;http://chocolatey.org&quot;&gt;chocolatey.org&lt;/a&gt; for detail.&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Sep 2014 14:11:00 +0800</pubDate>
        <link>http://zhenkeblog.cn/2014/09/10/chocolatey-a-windows-package-manager/</link>
        <guid isPermaLink="true">http://zhenkeblog.cn/2014/09/10/chocolatey-a-windows-package-manager/</guid>
      </item>
    
  </channel>
</rss>
